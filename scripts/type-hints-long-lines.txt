If you edit Python scripts using a programming editor, or IDE, you will be aware that many programming mistakes, particularly syntax errors, are found automatically. This form of program checking is called 'linting' because the first such static testing program was called 'lint', as it found the 'fluff' in your programs.
There is no requirement that a program checked by a linter is complete, or even that it is syntactically correct. 
Liniting is therefore particularly useful when editing.
Static testing isn't limited to finding syntax errors, which you would find soon enough when they prevent your program from running. Linting can also find semantic errors such as unused variables and unreachable lines of code.
As Python is a dynamically typed language, there is another sort of error that we encounter, the TypeError. For example a common mistake is to write something like the code shown here. This is perfectly valid Python but the result of the input() function is always a string, so this will not work as intended. However, if we add type hints to our program, the linter can help us avoid such mistakes.
By adding a *type hint*, in this case `: int`, we instruct the linter to check that all uses of the variable `num` are consistent with an integer type. When this code is linted an error message shown - expression has type "str", variable has type "int".
Note that this is a linting error, in this case the output of the `mypy` program, not a Python interpreter error. 
The program will still run, and its behaviour is still incorrect, but we now know there is an error to be fixed.
Type hints are especially useful for function signatures. Note that the return type is also hinted. 
For functions that do not return a value use -> None.
Although using an IDE for editing is when you are most likely to use static checking, linters and other static checking tools can be run from the command line. They can also be used as part of the software test, build, and release phases for large projects.

